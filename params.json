{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Poirot","google":"","body":"# Poirot\r\n\r\n## Description\r\n\r\nAllows you to use [Mustache](http://mustache.github.com/) template partials in Rails, also\r\nads a helper method to easily allow JavaScript to re-use the same templates.\r\n\r\n## Usage\r\n\r\nCreate a partial just like you would with erb, prefixing the name with an underscore.\r\n\r\n    app/views/posts/_post_list.html.mustache\r\n\r\nThe template will have access to all normal rails helper methods and any instance variables\r\nthat were set in the controller.  If you need more than this an optional view class can be\r\nincluded, it should have the same name as the partial, but without the underscore.\r\n\r\n    app/views/posts/post_list_view.rb\r\n    \r\n    module Posts\r\n      class PostListView < Poirot::View\r\n        def foo\r\n          \"bar\"\r\n        end\r\n    \r\n        def post_link\r\n          post_path(post)\r\n        end\r\n      end\r\n    end\r\n\r\nThe view class has access to all the normal Rails helpers and access to the controller\r\ninstance variables, e.g @post becomes the method post.\r\n\r\nAlso included is a simple view helper for including mustache templates in a page ready for\r\nuse by JavaScript.\r\n\r\n    <%= template_include_tag 'post_list' %>\r\n\r\nThe above will insert a script tag with the contents of the partial called `post_list`, the \r\ntype will be set as `text/mustache` and the id will be `post-list-template`.\r\n\r\n    <script id=\"post-list-template\" type=\"text/mustache\">\r\n      <!-- template will be here! -->\r\n    </script>\r\n\r\n### Javascript Helper\r\n\r\nPoirot also adds a javascript helper for using mustache templates from the browser.  In Rails 3.1 this will be automatically added to the asset pipeline, you just need to add `//= require poirot` in your application.js file.\r\n\r\nIf you are using rails 3 then you can run the `rails g poirot:install` to install the javascripts in your application.\r\n\r\nUsing the poirot javascript helper is simple, given a template added to the page using `template_include_tag`\r\n\r\n    <%= template_include_tag 'post_list' %>\r\n\r\nYou can render this template from javascript by doing the following\r\n\r\n    poirot.postList()\r\n\r\nThis will return the contents of the `post_list` template wrapped in a jQuery object, ready for inserting into the dom.  If you have data to pass to the template then you can pass it as the argument to the function, e.g.\r\n\r\n    poirot.postList({foo: \"bar\"})\r\n\r\n#### Using Handlebars.js\r\n\r\nIt is possible to use handlebars instead of mustache when rendering templates client side.  To do this you need to first include the handlebars.js source.  The instead of including `//= require poirot` in the asset pipeline you should include `//= require poirot-handlebars`\r\n\r\n#### Using Hogan.js\r\n\r\nIt is also possible to use hogan.js instead of mustache when rendering templates client side.  To do this you need to first include the hogan.js source.  The instead of including `//= require poirot` in the asset pipeline you should include `//= require poirot-hogan`\r\n\r\n## Dependencies\r\n\r\n*  Rails >3.0.0\r\n*  Mustache\r\n\r\n## More\r\n\r\nAn [example](http://github.com/olivernn/notepad) app using Poirot\r\n\r\n## Credits\r\n\r\n[Mark Evans](http://github.com/markevans) & [Oliver Nightingale](http://github.com/olivernn)","tagline":"mustaches in your rails"}